/********** Grid Layout utilities **********/

$generate-grid-layout-responsive-styles: true !default;
$generate-grid-layout-auto-columns-styles: true !default;
$grid-layout-max-columns: 8;

$grid-layout-breakpoints: map-merge(
    $grid-breakpoints,
    (
        xxl: 1600px,
        xxxl: 1920px,
        xxxxl: 2560px,
    )
);

@mixin grid-template($rows, $columns) {
    @if ($columns) {
        grid-template-columns: repeat($columns, 1fr);
        grid-auto-flow: row;
    }

    @if ($rows) {
        grid-template-rows: repeat($rows, 1fr);
        grid-auto-flow: column;
    }
}

@mixin grid-auto-columns($size) {
    grid-template-columns: repeat(auto-fit, minmax(unquote("min(10rem, 100%)"), $size));
    grid-auto-flow: dense;
}

.d-grid {
    display: grid;
    grid-gap: 1rem;
}

.grid-no-gap {
    grid-gap: 0 !important;
}

.grid-auto-auto {
    grid-template-columns: auto auto;
}

.grid-auto-1fr {
    grid-template-columns: auto 1fr;
}

.grid-1fr-auto {
    grid-template-columns: 1fr auto;
}

.col-span-2 {
    grid-column: 1 / span 2;
}

@if $generate-grid-layout-responsive-styles {
    @each $breakpoint in map-keys($grid-layout-breakpoints) {
        @include media-breakpoint-up($breakpoint, $grid-layout-breakpoints) {
            $infix: breakpoint-infix($breakpoint, $grid-layout-breakpoints);

            @for $i from 1 through $grid-layout-max-columns {
                .grid#{$infix}-c#{$i} {
                    @include grid-template(null, $i);
                }
            }
        }
    }
}

@if $generate-grid-layout-auto-columns-styles {
    @for $i from 0 through 5 {
        .grid-auto-x#{$i} {
            @include grid-auto-columns(20rem + $i * 5rem);
        }
    }
}

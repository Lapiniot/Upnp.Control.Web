$enable-gradients: true;
$breadcrumb-divider: quote("\276f");
$breadcrumb-item-padding-x: 0.25rem !default;
$breadcrumb-border-radius: 0 !default;
$generate-album-art-sizes: true;
$generate-grid-layout-responsive-styles: false;

// Configuration
@import "../../node_modules/bootstrap/scss/functions";
@import "../../node_modules/bootstrap/scss/variables";
@import "../../node_modules/bootstrap/scss/mixins";

@import "../../node_modules/bootstrap/scss/utilities";

// Layout & components
@import "../../node_modules/bootstrap/scss/root";
@import "../../node_modules/bootstrap/scss/reboot";
@import "../../node_modules/bootstrap/scss/type";
@import "../../node_modules/bootstrap/scss/forms";
@import "../../node_modules/bootstrap/scss/buttons";
@import "../../node_modules/bootstrap/scss/transitions";
@import "../../node_modules/bootstrap/scss/button-group";
@import "../../node_modules/bootstrap/scss/nav";
@import "../../node_modules/bootstrap/scss/navbar";
@import "../../node_modules/bootstrap/scss/card";
@import "../../node_modules/bootstrap/scss/breadcrumb";
@import "../../node_modules/bootstrap/scss/pagination";
@import "../../node_modules/bootstrap/scss/badge";
@import "../../node_modules/bootstrap/scss/alert";
@import "../../node_modules/bootstrap/scss/toasts";
@import "../../node_modules/bootstrap/scss/list-group";
@import "../../node_modules/bootstrap/scss/close";
@import "../../node_modules/bootstrap/scss/modal";
@import "../../node_modules/bootstrap/scss/spinners";
@import "../../node_modules/bootstrap/scss/dropdown";

// Helpers
@import "../../node_modules/bootstrap/scss/helpers";

// Utilities
@import "../../node_modules/bootstrap/scss/utilities/api";

// Grid classes

// Uncoment to generate all responsive grid classes
//@import "../../node_modules/bootstrap/scss/grid";

.row {
    @include make-row();

    > * {
        @include make-col-ready();
    }
}

.col {
    flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
}

.col-auto {
    @include make-col-auto();
}

// Gutters
//
// Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
@each $key, $value in $gutters {
    .g-#{$key},
    .gx-#{$key} {
        --bs-gutter-x: #{$value};
    }

    .g-#{$key},
    .gy-#{$key} {
        --bs-gutter-y: #{$value};
    }
}

@import "fontawesome";
@import "text-utils";
@import "layout-grid";
@import "layout-table";
@import "spoiler";
@import "modal";
@import "slider";

.flex-basis-100 {
    flex-basis: 100%;
}

.flex-basis-0 {
    flex-basis: 0;
}

.sticky-bottom {
    position: sticky;
    bottom: 0;
    z-index: $zindex-sticky;
}

.sticky-left {
    position: sticky;
    top: 0 !important;
    height: 100vh;
    z-index: $zindex-sticky;
}

@each $k, $v in $spacers {
    .gapx-#{$k} {
        column-gap: $v;
    }
}

@each $k, $v in $spacers {
    .gapy-#{$k} {
        row-gap: $v;
    }
}

@each $k, $v in $spacers {
    .gap-#{$k} {
        @extend .gapx-#{$k};
        @extend .gapy-#{$k};
    }
}

/********** Specific site element styles **********/

.upnp-dev-icon {
    height: 48px !important;
    width: 48px !important;
    object-fit: contain;
    margin-right: 0.5rem;
}

$album-art-size-base: 2rem;

$album-art-sizes: (
    //"xs": 0.5,
    "sm": 0.75,
    //"md": 1.25,
    //"lg": 1.75,
    //"xl": 2,
);

.album-art {
    width: $album-art-size-base;
    min-width: $album-art-size-base;
    height: $album-art-size-base;
    min-height: $album-art-size-base;
    line-height: $album-art-size-base;
    text-align: center;
    vertical-align: middle !important;
    // This renders in case of image download error
    &:after {
        content: "?";
        display: block;
        color: orangered;
        border: 1px dashed orangered;
        font-weight: bolder;
    }
}

@mixin album-art($size) {
    @extend .album-art;
    width: $size !important;
    min-width: $size !important;
    height: $size !important;
    min-height: $size !important;
}

@if $generate-album-art-sizes {
    @each $name, $size in $album-art-sizes {
        .album-art-#{$name} {
            @include album-art($size * $album-art-size-base);
        }
    }
}

.table-hover-link > * > * {
    & .stack-layer {
        background-color: rgba($color: #000000, $alpha: 0.4);
        color: white;
    }
}

.grid-form {
    @extend .d-grid;
    @extend .gapx-2;
    @extend .gapy-1;
    grid-template-columns: auto 1fr;
    white-space: nowrap !important;

    & > :nth-of-type(odd) {
        justify-self: end;
        color: $text-muted;

        &::after {
            content: ":";
        }
    }

    & > :nth-of-type(even) {
        overflow: hidden;
        text-overflow: ellipsis;
    }
}

@keyframes fade {
    25% {
        color: rgba($color: #fff, $alpha: 0.9);
    }
    50% {
        color: rgba($color: #fff, $alpha: 0.8);
    }
    75% {
        color: rgba($color: #fff, $alpha: 0.9);
    }
}

.animate-pulse {
    animation: fade 1.5s ease-in-out infinite;
}

input[type="checkbox"].chk-no-label {
    &:after {
        width: 20px;
        content: ("0");
        display: inline-block;
        background-color: red;
    }

    &:checked:after {
        content: ("1");
    }
}

.no-outline {
    &:focus,
    &:active {
        outline: none !important;
        box-shadow: none;
    }
}

a.no-decoration,
.no-decoration > a {
    text-decoration: none;
}

.backdrop {
    position: absolute;
    z-index: $zindex-modal;
    width: 100%;
    height: 100%;
    background-color: rgba(#000, 0.5);
    pointer-events: none;
}

.backdrop-primary {
    background-color: rgba($primary, 0.3);
}

.backdrop-secondary {
    background-color: rgba($secondary, 0.3);
}

.backdrop-danger {
    background-color: rgba($danger, 0.3);
}

.vp-center {
    position: sticky;
    top: calc(min(50%, 50vh));
    transform: translate3d(0, -50%, 0);
}

.stack {
    position: relative;

    & > &-layer {
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        right: 0;

        &-hover {
            opacity: 0;
            transition: opacity 250ms ease-in-out 125ms;
        }
    }

    &:hover > &-layer-hover {
        opacity: 1;
        transition-delay: 0ms;
    }
}

.hover-container {
    display: inline;

    .hover-activated {
        opacity: 0;
        transition: opacity 500ms ease-in-out 1s;
    }

    &:hover {
        .hover-activated {
            opacity: 1;
            transition-delay: 500ms;
        }
    }
}

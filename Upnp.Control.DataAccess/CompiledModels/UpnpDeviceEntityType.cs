// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Upnp.Control.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Upnp.Control.DataAccess.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class UpnpDeviceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Upnp.Control.Models.UpnpDevice",
                typeof(UpnpDevice),
                baseEntityType,
                propertyCount: 14,
                navigationCount: 2,
                keyCount: 1);

            var udn = runtimeEntityType.AddProperty(
                "Udn",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("Udn", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Udn>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                afterSaveBehavior: PropertySaveBehavior.Throw);
            udn.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Udn(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Udn(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Udn(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Udn(instance) == null);
            udn.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Udn(entity) = value);
            udn.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Udn(entity) = value);
            udn.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Udn(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Udn(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(udn, 0),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(udn, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            udn.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: -1,
                relationshipIndex: 0,
                storeGenerationIndex: -1);
            udn.TypeMapping = SqliteStringTypeMapping.Default;
            udn.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(udn));

            var bootId = runtimeEntityType.AddProperty(
                "BootId",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("BootId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<BootId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            bootId.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.BootId(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.BootId(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.BootId(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.BootId(instance) == null);
            bootId.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.BootId(entity) = value);
            bootId.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.BootId(entity) = value);
            bootId.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.BootId(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.BootId(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(bootId, 1),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(bootId),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            bootId.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            bootId.TypeMapping = SqliteStringTypeMapping.Default;

            var configId = runtimeEntityType.AddProperty(
                "ConfigId",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("ConfigId", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ConfigId>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            configId.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ConfigId(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ConfigId(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ConfigId(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ConfigId(instance) == null);
            configId.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ConfigId(entity) = value);
            configId.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ConfigId(entity) = value);
            configId.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ConfigId(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ConfigId(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(configId, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(configId),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            configId.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            configId.TypeMapping = SqliteStringTypeMapping.Default;

            var description = runtimeEntityType.AddProperty(
                "Description",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("Description", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Description>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            description.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Description(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Description(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Description(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Description(instance) == null);
            description.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Description(entity) = value);
            description.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Description(entity) = value);
            description.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Description(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Description(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(description, 3),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(description),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            description.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            description.TypeMapping = SqliteStringTypeMapping.Default;

            var deviceType = runtimeEntityType.AddProperty(
                "DeviceType",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("DeviceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<DeviceType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            deviceType.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.DeviceType(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.DeviceType(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.DeviceType(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.DeviceType(instance) == null);
            deviceType.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.DeviceType(entity) = value);
            deviceType.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.DeviceType(entity) = value);
            deviceType.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.DeviceType(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.DeviceType(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(deviceType, 4),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(deviceType),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            deviceType.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            deviceType.TypeMapping = SqliteStringTypeMapping.Default;

            var expiresAt = runtimeEntityType.AddProperty(
                "ExpiresAt",
                typeof(DateTime),
                propertyInfo: typeof(UpnpDevice).GetProperty("ExpiresAt", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ExpiresAt>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified));
            expiresAt.SetGetter(
                DateTime (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ExpiresAt(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ExpiresAt(entity) == default(DateTime),
                DateTime (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ExpiresAt(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ExpiresAt(instance) == default(DateTime));
            expiresAt.SetSetter(
                (UpnpDevice entity, DateTime value) => UpnpDeviceUnsafeAccessors.ExpiresAt(entity) = value);
            expiresAt.SetMaterializationSetter(
                (UpnpDevice entity, DateTime value) => UpnpDeviceUnsafeAccessors.ExpiresAt(entity) = value);
            expiresAt.SetAccessors(
                DateTime (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ExpiresAt(((UpnpDevice)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ExpiresAt(((UpnpDevice)(entry.Entity))),
                DateTime (InternalEntityEntry entry) => entry.ReadOriginalValue<DateTime>(expiresAt, 5),
                DateTime (InternalEntityEntry entry) => entry.GetCurrentValue<DateTime>(expiresAt),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            expiresAt.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            expiresAt.TypeMapping = SqliteDateTimeTypeMapping.Default;

            var friendlyName = runtimeEntityType.AddProperty(
                "FriendlyName",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("FriendlyName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<FriendlyName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            friendlyName.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.FriendlyName(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.FriendlyName(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.FriendlyName(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.FriendlyName(instance) == null);
            friendlyName.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.FriendlyName(entity) = value);
            friendlyName.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.FriendlyName(entity) = value);
            friendlyName.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.FriendlyName(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.FriendlyName(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(friendlyName, 6),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(friendlyName),
                object (ValueBuffer valueBuffer) => valueBuffer[6]);
            friendlyName.SetPropertyIndexes(
                index: 6,
                originalValueIndex: 6,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            friendlyName.TypeMapping = SqliteStringTypeMapping.Default;

            var location = runtimeEntityType.AddProperty(
                "Location",
                typeof(Uri),
                propertyInfo: typeof(UpnpDevice).GetProperty("Location", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Location>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            location.SetGetter(
                Uri (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Location(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Location(entity) == null,
                Uri (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Location(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Location(instance) == null);
            location.SetSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.Location(entity) = value);
            location.SetMaterializationSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.Location(entity) = value);
            location.SetAccessors(
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Location(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Location(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(location, 7),
                Uri (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(location),
                object (ValueBuffer valueBuffer) => valueBuffer[7]);
            location.SetPropertyIndexes(
                index: 7,
                originalValueIndex: 7,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            location.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    string (Uri v) => ((object)v).ToString(),
                    Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        string (Uri v) => ((object)v).ToString(),
                        Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var manufacturer = runtimeEntityType.AddProperty(
                "Manufacturer",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("Manufacturer", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Manufacturer>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufacturer.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Manufacturer(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Manufacturer(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Manufacturer(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Manufacturer(instance) == null);
            manufacturer.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Manufacturer(entity) = value);
            manufacturer.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.Manufacturer(entity) = value);
            manufacturer.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Manufacturer(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Manufacturer(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(manufacturer, 8),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(manufacturer),
                object (ValueBuffer valueBuffer) => valueBuffer[8]);
            manufacturer.SetPropertyIndexes(
                index: 8,
                originalValueIndex: 8,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            manufacturer.TypeMapping = SqliteStringTypeMapping.Default;

            var manufacturerUri = runtimeEntityType.AddProperty(
                "ManufacturerUri",
                typeof(Uri),
                propertyInfo: typeof(UpnpDevice).GetProperty("ManufacturerUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ManufacturerUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            manufacturerUri.SetGetter(
                Uri (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ManufacturerUri(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ManufacturerUri(entity) == null,
                Uri (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ManufacturerUri(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ManufacturerUri(instance) == null);
            manufacturerUri.SetSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.ManufacturerUri(entity) = value);
            manufacturerUri.SetMaterializationSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.ManufacturerUri(entity) = value);
            manufacturerUri.SetAccessors(
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ManufacturerUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ManufacturerUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(manufacturerUri, 9),
                Uri (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(manufacturerUri),
                object (ValueBuffer valueBuffer) => valueBuffer[9]);
            manufacturerUri.SetPropertyIndexes(
                index: 9,
                originalValueIndex: 9,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            manufacturerUri.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    string (Uri v) => ((object)v).ToString(),
                    Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        string (Uri v) => ((object)v).ToString(),
                        Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var modelName = runtimeEntityType.AddProperty(
                "ModelName",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("ModelName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ModelName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modelName.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelName(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelName(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelName(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelName(instance) == null);
            modelName.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ModelName(entity) = value);
            modelName.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ModelName(entity) = value);
            modelName.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelName(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelName(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(modelName, 10),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(modelName),
                object (ValueBuffer valueBuffer) => valueBuffer[10]);
            modelName.SetPropertyIndexes(
                index: 10,
                originalValueIndex: 10,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            modelName.TypeMapping = SqliteStringTypeMapping.Default;

            var modelNumber = runtimeEntityType.AddProperty(
                "ModelNumber",
                typeof(string),
                propertyInfo: typeof(UpnpDevice).GetProperty("ModelNumber", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ModelNumber>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modelNumber.SetGetter(
                string (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelNumber(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelNumber(entity) == null,
                string (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelNumber(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelNumber(instance) == null);
            modelNumber.SetSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ModelNumber(entity) = value);
            modelNumber.SetMaterializationSetter(
                (UpnpDevice entity, string value) => UpnpDeviceUnsafeAccessors.ModelNumber(entity) = value);
            modelNumber.SetAccessors(
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelNumber(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelNumber(((UpnpDevice)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(modelNumber, 11),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(modelNumber),
                object (ValueBuffer valueBuffer) => valueBuffer[11]);
            modelNumber.SetPropertyIndexes(
                index: 11,
                originalValueIndex: 11,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            modelNumber.TypeMapping = SqliteStringTypeMapping.Default;

            var modelUri = runtimeEntityType.AddProperty(
                "ModelUri",
                typeof(Uri),
                propertyInfo: typeof(UpnpDevice).GetProperty("ModelUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<ModelUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            modelUri.SetGetter(
                Uri (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelUri(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.ModelUri(entity) == null,
                Uri (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelUri(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.ModelUri(instance) == null);
            modelUri.SetSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.ModelUri(entity) = value);
            modelUri.SetMaterializationSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.ModelUri(entity) = value);
            modelUri.SetAccessors(
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.ModelUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(modelUri, 12),
                Uri (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(modelUri),
                object (ValueBuffer valueBuffer) => valueBuffer[12]);
            modelUri.SetPropertyIndexes(
                index: 12,
                originalValueIndex: 12,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            modelUri.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    string (Uri v) => ((object)v).ToString(),
                    Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        string (Uri v) => ((object)v).ToString(),
                        Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var presentationUri = runtimeEntityType.AddProperty(
                "PresentationUri",
                typeof(Uri),
                propertyInfo: typeof(UpnpDevice).GetProperty("PresentationUri", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<PresentationUri>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            presentationUri.SetGetter(
                Uri (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.PresentationUri(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.PresentationUri(entity) == null,
                Uri (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.PresentationUri(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.PresentationUri(instance) == null);
            presentationUri.SetSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.PresentationUri(entity) = value);
            presentationUri.SetMaterializationSetter(
                (UpnpDevice entity, Uri value) => UpnpDeviceUnsafeAccessors.PresentationUri(entity) = value);
            presentationUri.SetAccessors(
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.PresentationUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.PresentationUri(((UpnpDevice)(entry.Entity))),
                Uri (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(presentationUri, 13),
                Uri (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(presentationUri),
                object (ValueBuffer valueBuffer) => valueBuffer[13]);
            presentationUri.SetPropertyIndexes(
                index: 13,
                originalValueIndex: 13,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            presentationUri.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    string (Uri v) => ((object)v).ToString(),
                    Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        string (Uri v) => ((object)v).ToString(),
                        Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var key = runtimeEntityType.AddKey(
                new[] { udn });
            runtimeEntityType.SetPrimaryKey(key);

            return runtimeEntityType;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var udn = runtimeEntityType.FindProperty("Udn");
            var bootId = runtimeEntityType.FindProperty("BootId");
            var configId = runtimeEntityType.FindProperty("ConfigId");
            var description = runtimeEntityType.FindProperty("Description");
            var deviceType = runtimeEntityType.FindProperty("DeviceType");
            var expiresAt = runtimeEntityType.FindProperty("ExpiresAt");
            var friendlyName = runtimeEntityType.FindProperty("FriendlyName");
            var location = runtimeEntityType.FindProperty("Location");
            var manufacturer = runtimeEntityType.FindProperty("Manufacturer");
            var manufacturerUri = runtimeEntityType.FindProperty("ManufacturerUri");
            var modelName = runtimeEntityType.FindProperty("ModelName");
            var modelNumber = runtimeEntityType.FindProperty("ModelNumber");
            var modelUri = runtimeEntityType.FindProperty("ModelUri");
            var presentationUri = runtimeEntityType.FindProperty("PresentationUri");
            var key = runtimeEntityType.FindKey(new[] { udn });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNullableFactory<string, int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<string>(key));
            var icons = runtimeEntityType.FindNavigation("Icons");
            var services = runtimeEntityType.FindNavigation("Services");
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((UpnpDevice)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, string, string, string, string, DateTime, string, Uri, string, Uri, string, string, Uri, Uri>((source.GetCurrentValue<string>(udn) == null ? null : ((ValueComparer<string>)(((IProperty)udn).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(udn))), (source.GetCurrentValue<string>(bootId) == null ? null : ((ValueComparer<string>)(((IProperty)bootId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(bootId))), (source.GetCurrentValue<string>(configId) == null ? null : ((ValueComparer<string>)(((IProperty)configId).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(configId))), (source.GetCurrentValue<string>(description) == null ? null : ((ValueComparer<string>)(((IProperty)description).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(description))), (source.GetCurrentValue<string>(deviceType) == null ? null : ((ValueComparer<string>)(((IProperty)deviceType).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(deviceType))), ((ValueComparer<DateTime>)(((IProperty)expiresAt).GetValueComparer())).Snapshot(source.GetCurrentValue<DateTime>(expiresAt)), (source.GetCurrentValue<string>(friendlyName) == null ? null : ((ValueComparer<string>)(((IProperty)friendlyName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(friendlyName))), (source.GetCurrentValue<Uri>(location) == null ? null : ((ValueComparer<Uri>)(((IProperty)location).GetValueComparer())).Snapshot(source.GetCurrentValue<Uri>(location))), (source.GetCurrentValue<string>(manufacturer) == null ? null : ((ValueComparer<string>)(((IProperty)manufacturer).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(manufacturer))), (source.GetCurrentValue<Uri>(manufacturerUri) == null ? null : ((ValueComparer<Uri>)(((IProperty)manufacturerUri).GetValueComparer())).Snapshot(source.GetCurrentValue<Uri>(manufacturerUri))), (source.GetCurrentValue<string>(modelName) == null ? null : ((ValueComparer<string>)(((IProperty)modelName).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(modelName))), (source.GetCurrentValue<string>(modelNumber) == null ? null : ((ValueComparer<string>)(((IProperty)modelNumber).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(modelNumber))), (source.GetCurrentValue<Uri>(modelUri) == null ? null : ((ValueComparer<Uri>)(((IProperty)modelUri).GetValueComparer())).Snapshot(source.GetCurrentValue<Uri>(modelUri))), (source.GetCurrentValue<Uri>(presentationUri) == null ? null : ((ValueComparer<Uri>)(((IProperty)presentationUri).GetValueComparer())).Snapshot(source.GetCurrentValue<Uri>(presentationUri))))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => Snapshot.Empty);
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => Snapshot.Empty);
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => Snapshot.Empty);
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((UpnpDevice)(source.Entity));
                    return ((ISnapshot)(new Snapshot<string, object, object>((source.GetCurrentValue<string>(udn) == null ? null : ((ValueComparer<string>)(((IProperty)udn).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(udn))), SnapshotFactoryFactory.SnapshotCollection(UpnpDeviceUnsafeAccessors.Icons(entity)), SnapshotFactoryFactory.SnapshotCollection(UpnpDeviceUnsafeAccessors.Services(entity)))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 14,
                navigationCount: 2,
                complexPropertyCount: 0,
                originalValueCount: 14,
                shadowCount: 0,
                relationshipCount: 3,
                storeGeneratedCount: 0);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "UpnpDevices");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
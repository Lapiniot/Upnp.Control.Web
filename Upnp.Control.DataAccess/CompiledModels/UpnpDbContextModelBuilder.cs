// <auto-generated />
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Upnp.Control.DataAccess.CompiledModels
{
    public partial class UpnpDbContextModel
    {
        partial void Initialize()
        {
            var icon = IconEntityType.Create(this);
            var service = ServiceEntityType.Create(this);
            var upnpDevice = UpnpDeviceEntityType.Create(this);

            IconEntityType.CreateForeignKey1(icon, upnpDevice);
            ServiceEntityType.CreateForeignKey1(service, upnpDevice);

            IconEntityType.CreateAnnotations(icon);
            ServiceEntityType.CreateAnnotations(service);
            UpnpDeviceEntityType.CreateAnnotations(upnpDevice);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var icon = FindEntityType("Upnp.Control.Models.Icon")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            icon.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var upnpControlModelsIconTableBase = new TableBase("Upnp.Control.Models.Icon", null, relationalModel);
            var heightColumnBase = new ColumnBase<ColumnMappingBase>("Height", "INTEGER", upnpControlModelsIconTableBase);
            upnpControlModelsIconTableBase.Columns.Add("Height", heightColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", upnpControlModelsIconTableBase);
            upnpControlModelsIconTableBase.Columns.Add("Id", idColumnBase);
            var mimeColumnBase = new ColumnBase<ColumnMappingBase>("Mime", "TEXT", upnpControlModelsIconTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsIconTableBase.Columns.Add("Mime", mimeColumnBase);
            var udnColumnBase = new ColumnBase<ColumnMappingBase>("Udn", "TEXT", upnpControlModelsIconTableBase);
            upnpControlModelsIconTableBase.Columns.Add("Udn", udnColumnBase);
            var urlColumnBase = new ColumnBase<ColumnMappingBase>("Url", "TEXT", upnpControlModelsIconTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsIconTableBase.Columns.Add("Url", urlColumnBase);
            var widthColumnBase = new ColumnBase<ColumnMappingBase>("Width", "INTEGER", upnpControlModelsIconTableBase);
            upnpControlModelsIconTableBase.Columns.Add("Width", widthColumnBase);
            relationalModel.DefaultTables.Add("Upnp.Control.Models.Icon", upnpControlModelsIconTableBase);
            var upnpControlModelsIconMappingBase = new TableMappingBase<ColumnMappingBase>(icon, upnpControlModelsIconTableBase, true);
            upnpControlModelsIconTableBase.AddTypeMapping(upnpControlModelsIconMappingBase, false);
            defaultTableMappings.Add(upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, icon.FindProperty("Id")!, upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)heightColumnBase, icon.FindProperty("Height")!, upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)mimeColumnBase, icon.FindProperty("Mime")!, upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)udnColumnBase, icon.FindProperty("Udn")!, upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)urlColumnBase, icon.FindProperty("Url")!, upnpControlModelsIconMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)widthColumnBase, icon.FindProperty("Width")!, upnpControlModelsIconMappingBase);

            var tableMappings = new List<TableMapping>();
            icon.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var iconTable = new Table("Icon", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", iconTable);
            iconTable.Columns.Add("Id", idColumn);
            var heightColumn = new Column("Height", "INTEGER", iconTable);
            iconTable.Columns.Add("Height", heightColumn);
            var mimeColumn = new Column("Mime", "TEXT", iconTable)
            {
                IsNullable = true
            };
            iconTable.Columns.Add("Mime", mimeColumn);
            var udnColumn = new Column("Udn", "TEXT", iconTable);
            iconTable.Columns.Add("Udn", udnColumn);
            var urlColumn = new Column("Url", "TEXT", iconTable)
            {
                IsNullable = true
            };
            iconTable.Columns.Add("Url", urlColumn);
            var widthColumn = new Column("Width", "INTEGER", iconTable);
            iconTable.Columns.Add("Width", widthColumn);
            var pK_Icon = new UniqueConstraint("PK_Icon", iconTable, new[] { idColumn });
            iconTable.PrimaryKey = pK_Icon;
            var pK_IconUc = RelationalModel.GetKey(this,
                "Upnp.Control.Models.Icon",
                new[] { "Id" });
            pK_Icon.MappedKeys.Add(pK_IconUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_IconUc).Add(pK_Icon);
            iconTable.UniqueConstraints.Add("PK_Icon", pK_Icon);
            var iX_Icon_Udn = new TableIndex(
            "IX_Icon_Udn", iconTable, new[] { udnColumn }, false);
            var iX_Icon_UdnIx = RelationalModel.GetIndex(this,
                "Upnp.Control.Models.Icon",
                new[] { "Udn" });
            iX_Icon_Udn.MappedIndexes.Add(iX_Icon_UdnIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Icon_UdnIx).Add(iX_Icon_Udn);
            iconTable.Indexes.Add("IX_Icon_Udn", iX_Icon_Udn);
            relationalModel.Tables.Add(("Icon", null), iconTable);
            var iconTableMapping = new TableMapping(icon, iconTable, true);
            iconTable.AddTypeMapping(iconTableMapping, false);
            tableMappings.Add(iconTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, icon.FindProperty("Id")!, iconTableMapping);
            RelationalModel.CreateColumnMapping(heightColumn, icon.FindProperty("Height")!, iconTableMapping);
            RelationalModel.CreateColumnMapping(mimeColumn, icon.FindProperty("Mime")!, iconTableMapping);
            RelationalModel.CreateColumnMapping(udnColumn, icon.FindProperty("Udn")!, iconTableMapping);
            RelationalModel.CreateColumnMapping(urlColumn, icon.FindProperty("Url")!, iconTableMapping);
            RelationalModel.CreateColumnMapping(widthColumn, icon.FindProperty("Width")!, iconTableMapping);

            var service = FindEntityType("Upnp.Control.Models.Service")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            service.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var upnpControlModelsServiceTableBase = new TableBase("Upnp.Control.Models.Service", null, relationalModel);
            var controlUrlColumnBase = new ColumnBase<ColumnMappingBase>("ControlUrl", "TEXT", upnpControlModelsServiceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsServiceTableBase.Columns.Add("ControlUrl", controlUrlColumnBase);
            var eventsUrlColumnBase = new ColumnBase<ColumnMappingBase>("EventsUrl", "TEXT", upnpControlModelsServiceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsServiceTableBase.Columns.Add("EventsUrl", eventsUrlColumnBase);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", upnpControlModelsServiceTableBase);
            upnpControlModelsServiceTableBase.Columns.Add("Id", idColumnBase0);
            var metadataUrlColumnBase = new ColumnBase<ColumnMappingBase>("MetadataUrl", "TEXT", upnpControlModelsServiceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsServiceTableBase.Columns.Add("MetadataUrl", metadataUrlColumnBase);
            var serviceTypeColumnBase = new ColumnBase<ColumnMappingBase>("ServiceType", "TEXT", upnpControlModelsServiceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsServiceTableBase.Columns.Add("ServiceType", serviceTypeColumnBase);
            var udnColumnBase0 = new ColumnBase<ColumnMappingBase>("Udn", "TEXT", upnpControlModelsServiceTableBase);
            upnpControlModelsServiceTableBase.Columns.Add("Udn", udnColumnBase0);
            var uniqueServiceNameColumnBase = new ColumnBase<ColumnMappingBase>("UniqueServiceName", "TEXT", upnpControlModelsServiceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsServiceTableBase.Columns.Add("UniqueServiceName", uniqueServiceNameColumnBase);
            relationalModel.DefaultTables.Add("Upnp.Control.Models.Service", upnpControlModelsServiceTableBase);
            var upnpControlModelsServiceMappingBase = new TableMappingBase<ColumnMappingBase>(service, upnpControlModelsServiceTableBase, true);
            upnpControlModelsServiceTableBase.AddTypeMapping(upnpControlModelsServiceMappingBase, false);
            defaultTableMappings0.Add(upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, service.FindProperty("Id")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)controlUrlColumnBase, service.FindProperty("ControlUrl")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)eventsUrlColumnBase, service.FindProperty("EventsUrl")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)metadataUrlColumnBase, service.FindProperty("MetadataUrl")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)serviceTypeColumnBase, service.FindProperty("ServiceType")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)udnColumnBase0, service.FindProperty("Udn")!, upnpControlModelsServiceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)uniqueServiceNameColumnBase, service.FindProperty("UniqueServiceName")!, upnpControlModelsServiceMappingBase);

            var tableMappings0 = new List<TableMapping>();
            service.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var serviceTable = new Table("Service", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", serviceTable);
            serviceTable.Columns.Add("Id", idColumn0);
            var controlUrlColumn = new Column("ControlUrl", "TEXT", serviceTable)
            {
                IsNullable = true
            };
            serviceTable.Columns.Add("ControlUrl", controlUrlColumn);
            var eventsUrlColumn = new Column("EventsUrl", "TEXT", serviceTable)
            {
                IsNullable = true
            };
            serviceTable.Columns.Add("EventsUrl", eventsUrlColumn);
            var metadataUrlColumn = new Column("MetadataUrl", "TEXT", serviceTable)
            {
                IsNullable = true
            };
            serviceTable.Columns.Add("MetadataUrl", metadataUrlColumn);
            var serviceTypeColumn = new Column("ServiceType", "TEXT", serviceTable)
            {
                IsNullable = true
            };
            serviceTable.Columns.Add("ServiceType", serviceTypeColumn);
            var udnColumn0 = new Column("Udn", "TEXT", serviceTable);
            serviceTable.Columns.Add("Udn", udnColumn0);
            var uniqueServiceNameColumn = new Column("UniqueServiceName", "TEXT", serviceTable)
            {
                IsNullable = true
            };
            serviceTable.Columns.Add("UniqueServiceName", uniqueServiceNameColumn);
            var pK_Service = new UniqueConstraint("PK_Service", serviceTable, new[] { idColumn0 });
            serviceTable.PrimaryKey = pK_Service;
            var pK_ServiceUc = RelationalModel.GetKey(this,
                "Upnp.Control.Models.Service",
                new[] { "Id" });
            pK_Service.MappedKeys.Add(pK_ServiceUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ServiceUc).Add(pK_Service);
            serviceTable.UniqueConstraints.Add("PK_Service", pK_Service);
            var iX_Service_Udn = new TableIndex(
            "IX_Service_Udn", serviceTable, new[] { udnColumn0 }, false);
            var iX_Service_UdnIx = RelationalModel.GetIndex(this,
                "Upnp.Control.Models.Service",
                new[] { "Udn" });
            iX_Service_Udn.MappedIndexes.Add(iX_Service_UdnIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Service_UdnIx).Add(iX_Service_Udn);
            serviceTable.Indexes.Add("IX_Service_Udn", iX_Service_Udn);
            relationalModel.Tables.Add(("Service", null), serviceTable);
            var serviceTableMapping = new TableMapping(service, serviceTable, true);
            serviceTable.AddTypeMapping(serviceTableMapping, false);
            tableMappings0.Add(serviceTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, service.FindProperty("Id")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(controlUrlColumn, service.FindProperty("ControlUrl")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(eventsUrlColumn, service.FindProperty("EventsUrl")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(metadataUrlColumn, service.FindProperty("MetadataUrl")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(serviceTypeColumn, service.FindProperty("ServiceType")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(udnColumn0, service.FindProperty("Udn")!, serviceTableMapping);
            RelationalModel.CreateColumnMapping(uniqueServiceNameColumn, service.FindProperty("UniqueServiceName")!, serviceTableMapping);

            var upnpDevice = FindEntityType("Upnp.Control.Models.UpnpDevice")!;

            var defaultTableMappings1 = new List<TableMappingBase<ColumnMappingBase>>();
            upnpDevice.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings1);
            var upnpControlModelsUpnpDeviceTableBase = new TableBase("Upnp.Control.Models.UpnpDevice", null, relationalModel);
            var bootIdColumnBase = new ColumnBase<ColumnMappingBase>("BootId", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("BootId", bootIdColumnBase);
            var configIdColumnBase = new ColumnBase<ColumnMappingBase>("ConfigId", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ConfigId", configIdColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("Description", descriptionColumnBase);
            var deviceTypeColumnBase = new ColumnBase<ColumnMappingBase>("DeviceType", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("DeviceType", deviceTypeColumnBase);
            var expiresAtColumnBase = new ColumnBase<ColumnMappingBase>("ExpiresAt", "TEXT", upnpControlModelsUpnpDeviceTableBase);
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ExpiresAt", expiresAtColumnBase);
            var friendlyNameColumnBase = new ColumnBase<ColumnMappingBase>("FriendlyName", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("FriendlyName", friendlyNameColumnBase);
            var locationColumnBase = new ColumnBase<ColumnMappingBase>("Location", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("Location", locationColumnBase);
            var manufacturerColumnBase = new ColumnBase<ColumnMappingBase>("Manufacturer", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("Manufacturer", manufacturerColumnBase);
            var manufacturerUriColumnBase = new ColumnBase<ColumnMappingBase>("ManufacturerUri", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ManufacturerUri", manufacturerUriColumnBase);
            var modelNameColumnBase = new ColumnBase<ColumnMappingBase>("ModelName", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ModelName", modelNameColumnBase);
            var modelNumberColumnBase = new ColumnBase<ColumnMappingBase>("ModelNumber", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ModelNumber", modelNumberColumnBase);
            var modelUriColumnBase = new ColumnBase<ColumnMappingBase>("ModelUri", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("ModelUri", modelUriColumnBase);
            var presentationUriColumnBase = new ColumnBase<ColumnMappingBase>("PresentationUri", "TEXT", upnpControlModelsUpnpDeviceTableBase)
            {
                IsNullable = true
            };
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("PresentationUri", presentationUriColumnBase);
            var udnColumnBase1 = new ColumnBase<ColumnMappingBase>("Udn", "TEXT", upnpControlModelsUpnpDeviceTableBase);
            upnpControlModelsUpnpDeviceTableBase.Columns.Add("Udn", udnColumnBase1);
            relationalModel.DefaultTables.Add("Upnp.Control.Models.UpnpDevice", upnpControlModelsUpnpDeviceTableBase);
            var upnpControlModelsUpnpDeviceMappingBase = new TableMappingBase<ColumnMappingBase>(upnpDevice, upnpControlModelsUpnpDeviceTableBase, true);
            upnpControlModelsUpnpDeviceTableBase.AddTypeMapping(upnpControlModelsUpnpDeviceMappingBase, false);
            defaultTableMappings1.Add(upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)udnColumnBase1, upnpDevice.FindProperty("Udn")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)bootIdColumnBase, upnpDevice.FindProperty("BootId")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)configIdColumnBase, upnpDevice.FindProperty("ConfigId")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, upnpDevice.FindProperty("Description")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)deviceTypeColumnBase, upnpDevice.FindProperty("DeviceType")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)expiresAtColumnBase, upnpDevice.FindProperty("ExpiresAt")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)friendlyNameColumnBase, upnpDevice.FindProperty("FriendlyName")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)locationColumnBase, upnpDevice.FindProperty("Location")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)manufacturerColumnBase, upnpDevice.FindProperty("Manufacturer")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)manufacturerUriColumnBase, upnpDevice.FindProperty("ManufacturerUri")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modelNameColumnBase, upnpDevice.FindProperty("ModelName")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modelNumberColumnBase, upnpDevice.FindProperty("ModelNumber")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)modelUriColumnBase, upnpDevice.FindProperty("ModelUri")!, upnpControlModelsUpnpDeviceMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)presentationUriColumnBase, upnpDevice.FindProperty("PresentationUri")!, upnpControlModelsUpnpDeviceMappingBase);

            var tableMappings1 = new List<TableMapping>();
            upnpDevice.SetRuntimeAnnotation("Relational:TableMappings", tableMappings1);
            var upnpDevicesTable = new Table("UpnpDevices", null, relationalModel);
            var udnColumn1 = new Column("Udn", "TEXT", upnpDevicesTable);
            upnpDevicesTable.Columns.Add("Udn", udnColumn1);
            var bootIdColumn = new Column("BootId", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("BootId", bootIdColumn);
            var configIdColumn = new Column("ConfigId", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("ConfigId", configIdColumn);
            var descriptionColumn = new Column("Description", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("Description", descriptionColumn);
            var deviceTypeColumn = new Column("DeviceType", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("DeviceType", deviceTypeColumn);
            var expiresAtColumn = new Column("ExpiresAt", "TEXT", upnpDevicesTable);
            upnpDevicesTable.Columns.Add("ExpiresAt", expiresAtColumn);
            var friendlyNameColumn = new Column("FriendlyName", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("FriendlyName", friendlyNameColumn);
            var locationColumn = new Column("Location", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("Location", locationColumn);
            var manufacturerColumn = new Column("Manufacturer", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("Manufacturer", manufacturerColumn);
            var manufacturerUriColumn = new Column("ManufacturerUri", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("ManufacturerUri", manufacturerUriColumn);
            var modelNameColumn = new Column("ModelName", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("ModelName", modelNameColumn);
            var modelNumberColumn = new Column("ModelNumber", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("ModelNumber", modelNumberColumn);
            var modelUriColumn = new Column("ModelUri", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("ModelUri", modelUriColumn);
            var presentationUriColumn = new Column("PresentationUri", "TEXT", upnpDevicesTable)
            {
                IsNullable = true
            };
            upnpDevicesTable.Columns.Add("PresentationUri", presentationUriColumn);
            var pK_UpnpDevices = new UniqueConstraint("PK_UpnpDevices", upnpDevicesTable, new[] { udnColumn1 });
            upnpDevicesTable.PrimaryKey = pK_UpnpDevices;
            var pK_UpnpDevicesUc = RelationalModel.GetKey(this,
                "Upnp.Control.Models.UpnpDevice",
                new[] { "Udn" });
            pK_UpnpDevices.MappedKeys.Add(pK_UpnpDevicesUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_UpnpDevicesUc).Add(pK_UpnpDevices);
            upnpDevicesTable.UniqueConstraints.Add("PK_UpnpDevices", pK_UpnpDevices);
            relationalModel.Tables.Add(("UpnpDevices", null), upnpDevicesTable);
            var upnpDevicesTableMapping = new TableMapping(upnpDevice, upnpDevicesTable, true);
            upnpDevicesTable.AddTypeMapping(upnpDevicesTableMapping, false);
            tableMappings1.Add(upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(udnColumn1, upnpDevice.FindProperty("Udn")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(bootIdColumn, upnpDevice.FindProperty("BootId")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(configIdColumn, upnpDevice.FindProperty("ConfigId")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, upnpDevice.FindProperty("Description")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(deviceTypeColumn, upnpDevice.FindProperty("DeviceType")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(expiresAtColumn, upnpDevice.FindProperty("ExpiresAt")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(friendlyNameColumn, upnpDevice.FindProperty("FriendlyName")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(locationColumn, upnpDevice.FindProperty("Location")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(manufacturerColumn, upnpDevice.FindProperty("Manufacturer")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(manufacturerUriColumn, upnpDevice.FindProperty("ManufacturerUri")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(modelNameColumn, upnpDevice.FindProperty("ModelName")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(modelNumberColumn, upnpDevice.FindProperty("ModelNumber")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(modelUriColumn, upnpDevice.FindProperty("ModelUri")!, upnpDevicesTableMapping);
            RelationalModel.CreateColumnMapping(presentationUriColumn, upnpDevice.FindProperty("PresentationUri")!, upnpDevicesTableMapping);
            var fK_Icon_UpnpDevices_Udn = new ForeignKeyConstraint(
                "FK_Icon_UpnpDevices_Udn", iconTable, upnpDevicesTable,
                new[] { udnColumn },
                upnpDevicesTable.FindUniqueConstraint("PK_UpnpDevices")!, ReferentialAction.Cascade);
            var fK_Icon_UpnpDevices_UdnFk = RelationalModel.GetForeignKey(this,
                "Upnp.Control.Models.Icon",
                new[] { "Udn" },
                "Upnp.Control.Models.UpnpDevice",
                new[] { "Udn" });
            fK_Icon_UpnpDevices_Udn.MappedForeignKeys.Add(fK_Icon_UpnpDevices_UdnFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Icon_UpnpDevices_UdnFk).Add(fK_Icon_UpnpDevices_Udn);
            iconTable.ForeignKeyConstraints.Add(fK_Icon_UpnpDevices_Udn);
            upnpDevicesTable.ReferencingForeignKeyConstraints.Add(fK_Icon_UpnpDevices_Udn);
            var fK_Service_UpnpDevices_Udn = new ForeignKeyConstraint(
                "FK_Service_UpnpDevices_Udn", serviceTable, upnpDevicesTable,
                new[] { udnColumn0 },
                upnpDevicesTable.FindUniqueConstraint("PK_UpnpDevices")!, ReferentialAction.Cascade);
            var fK_Service_UpnpDevices_UdnFk = RelationalModel.GetForeignKey(this,
                "Upnp.Control.Models.Service",
                new[] { "Udn" },
                "Upnp.Control.Models.UpnpDevice",
                new[] { "Udn" });
            fK_Service_UpnpDevices_Udn.MappedForeignKeys.Add(fK_Service_UpnpDevices_UdnFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Service_UpnpDevices_UdnFk).Add(fK_Service_UpnpDevices_Udn);
            serviceTable.ForeignKeyConstraints.Add(fK_Service_UpnpDevices_Udn);
            upnpDevicesTable.ReferencingForeignKeyConstraints.Add(fK_Service_UpnpDevices_Udn);
            return relationalModel.MakeReadOnly();
        }
    }
}
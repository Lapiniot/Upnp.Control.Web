// <auto-generated />
using System;
using System.Collections.Generic;
using System.Reflection;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.ChangeTracking.Internal;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Upnp.Control.Models;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Upnp.Control.DataAccess.CompiledModels
{
    [EntityFrameworkInternal]
    public partial class IconEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Upnp.Control.Models.Icon",
                typeof(Icon),
                baseEntityType,
                propertyCount: 6,
                foreignKeyCount: 1,
                unnamedIndexCount: 1,
                keyCount: 1);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.SetAccessors(
                int (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(0) ? entry.ReadStoreGeneratedValue<int>(0) : (entry.FlaggedAsTemporary(0) && entry.ReadShadowValue<int>(0) == 0 ? entry.ReadTemporaryValue<int>(0) : entry.ReadShadowValue<int>(0))),
                int (InternalEntityEntry entry) => entry.ReadShadowValue<int>(0),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(id, 0),
                int (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<int>(id, 0),
                object (ValueBuffer valueBuffer) => valueBuffer[0]);
            id.SetPropertyIndexes(
                index: 0,
                originalValueIndex: 0,
                shadowIndex: 0,
                relationshipIndex: 0,
                storeGenerationIndex: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));
            id.SetCurrentValueComparer(new EntryCurrentValueComparer<int>(id));

            var height = runtimeEntityType.AddProperty(
                "Height",
                typeof(int),
                propertyInfo: typeof(Icon).GetProperty("Height", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Icon).GetField("<Height>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            height.SetGetter(
                int (Icon entity) => IconUnsafeAccessors.Height(entity),
                bool (Icon entity) => IconUnsafeAccessors.Height(entity) == 0,
                int (Icon instance) => IconUnsafeAccessors.Height(instance),
                bool (Icon instance) => IconUnsafeAccessors.Height(instance) == 0);
            height.SetSetter(
                (Icon entity, int value) => IconUnsafeAccessors.Height(entity) = value);
            height.SetMaterializationSetter(
                (Icon entity, int value) => IconUnsafeAccessors.Height(entity) = value);
            height.SetAccessors(
                int (InternalEntityEntry entry) => IconUnsafeAccessors.Height(((Icon)(entry.Entity))),
                int (InternalEntityEntry entry) => IconUnsafeAccessors.Height(((Icon)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(height, 1),
                int (InternalEntityEntry entry) => entry.GetCurrentValue<int>(height),
                object (ValueBuffer valueBuffer) => valueBuffer[1]);
            height.SetPropertyIndexes(
                index: 1,
                originalValueIndex: 1,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            height.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var mime = runtimeEntityType.AddProperty(
                "Mime",
                typeof(string),
                propertyInfo: typeof(Icon).GetProperty("Mime", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Icon).GetField("<Mime>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            mime.SetGetter(
                string (Icon entity) => IconUnsafeAccessors.Mime(entity),
                bool (Icon entity) => IconUnsafeAccessors.Mime(entity) == null,
                string (Icon instance) => IconUnsafeAccessors.Mime(instance),
                bool (Icon instance) => IconUnsafeAccessors.Mime(instance) == null);
            mime.SetSetter(
                (Icon entity, string value) => IconUnsafeAccessors.Mime(entity) = value);
            mime.SetMaterializationSetter(
                (Icon entity, string value) => IconUnsafeAccessors.Mime(entity) = value);
            mime.SetAccessors(
                string (InternalEntityEntry entry) => IconUnsafeAccessors.Mime(((Icon)(entry.Entity))),
                string (InternalEntityEntry entry) => IconUnsafeAccessors.Mime(((Icon)(entry.Entity))),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(mime, 2),
                string (InternalEntityEntry entry) => entry.GetCurrentValue<string>(mime),
                object (ValueBuffer valueBuffer) => valueBuffer[2]);
            mime.SetPropertyIndexes(
                index: 2,
                originalValueIndex: 2,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            mime.TypeMapping = SqliteStringTypeMapping.Default;

            var udn = runtimeEntityType.AddProperty(
                "Udn",
                typeof(string));
            udn.SetAccessors(
                string (InternalEntityEntry entry) => (entry.FlaggedAsStoreGenerated(3) ? entry.ReadStoreGeneratedValue<string>(1) : (entry.FlaggedAsTemporary(3) && entry.ReadShadowValue<string>(1) == null ? entry.ReadTemporaryValue<string>(1) : entry.ReadShadowValue<string>(1))),
                string (InternalEntityEntry entry) => entry.ReadShadowValue<string>(1),
                string (InternalEntityEntry entry) => entry.ReadOriginalValue<string>(udn, 3),
                string (InternalEntityEntry entry) => entry.ReadRelationshipSnapshotValue<string>(udn, 1),
                object (ValueBuffer valueBuffer) => valueBuffer[3]);
            udn.SetPropertyIndexes(
                index: 3,
                originalValueIndex: 3,
                shadowIndex: 1,
                relationshipIndex: 1,
                storeGenerationIndex: 1);
            udn.TypeMapping = SqliteStringTypeMapping.Default;
            udn.SetCurrentValueComparer(new EntryCurrentValueComparer<string>(udn));

            var url = runtimeEntityType.AddProperty(
                "Url",
                typeof(Uri),
                propertyInfo: typeof(Icon).GetProperty("Url", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Icon).GetField("<Url>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            url.SetGetter(
                Uri (Icon entity) => IconUnsafeAccessors.Url(entity),
                bool (Icon entity) => IconUnsafeAccessors.Url(entity) == null,
                Uri (Icon instance) => IconUnsafeAccessors.Url(instance),
                bool (Icon instance) => IconUnsafeAccessors.Url(instance) == null);
            url.SetSetter(
                (Icon entity, Uri value) => IconUnsafeAccessors.Url(entity) = value);
            url.SetMaterializationSetter(
                (Icon entity, Uri value) => IconUnsafeAccessors.Url(entity) = value);
            url.SetAccessors(
                Uri (InternalEntityEntry entry) => IconUnsafeAccessors.Url(((Icon)(entry.Entity))),
                Uri (InternalEntityEntry entry) => IconUnsafeAccessors.Url(((Icon)(entry.Entity))),
                Uri (InternalEntityEntry entry) => entry.ReadOriginalValue<Uri>(url, 4),
                Uri (InternalEntityEntry entry) => entry.GetCurrentValue<Uri>(url),
                object (ValueBuffer valueBuffer) => valueBuffer[4]);
            url.SetPropertyIndexes(
                index: 4,
                originalValueIndex: 4,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            url.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    bool (Uri v1, Uri v2) => v1 == v2,
                    int (Uri v) => ((object)v).GetHashCode(),
                    Uri (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    bool (string v1, string v2) => v1 == v2,
                    int (string v) => ((object)v).GetHashCode(),
                    string (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    string (Uri v) => ((object)v).ToString(),
                    Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        string (Uri v) => ((object)v).ToString(),
                        Uri (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var width = runtimeEntityType.AddProperty(
                "Width",
                typeof(int),
                propertyInfo: typeof(Icon).GetProperty("Width", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Icon).GetField("<Width>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                sentinel: 0);
            width.SetGetter(
                int (Icon entity) => IconUnsafeAccessors.Width(entity),
                bool (Icon entity) => IconUnsafeAccessors.Width(entity) == 0,
                int (Icon instance) => IconUnsafeAccessors.Width(instance),
                bool (Icon instance) => IconUnsafeAccessors.Width(instance) == 0);
            width.SetSetter(
                (Icon entity, int value) => IconUnsafeAccessors.Width(entity) = value);
            width.SetMaterializationSetter(
                (Icon entity, int value) => IconUnsafeAccessors.Width(entity) = value);
            width.SetAccessors(
                int (InternalEntityEntry entry) => IconUnsafeAccessors.Width(((Icon)(entry.Entity))),
                int (InternalEntityEntry entry) => IconUnsafeAccessors.Width(((Icon)(entry.Entity))),
                int (InternalEntityEntry entry) => entry.ReadOriginalValue<int>(width, 5),
                int (InternalEntityEntry entry) => entry.GetCurrentValue<int>(width),
                object (ValueBuffer valueBuffer) => valueBuffer[5]);
            width.SetPropertyIndexes(
                index: 5,
                originalValueIndex: 5,
                shadowIndex: -1,
                relationshipIndex: -1,
                storeGenerationIndex: -1);
            width.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                keyComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    bool (int v1, int v2) => v1 == v2,
                    int (int v) => v,
                    int (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { udn });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Udn") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Udn") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var icons = principalEntityType.AddNavigation("Icons",
                runtimeForeignKey,
                onDependent: false,
                typeof(IEnumerable<Icon>),
                propertyInfo: typeof(UpnpDevice).GetProperty("Icons", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Icons>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            icons.SetGetter(
                IEnumerable<Icon> (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Icons(entity),
                bool (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Icons(entity) == null,
                IEnumerable<Icon> (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Icons(instance),
                bool (UpnpDevice instance) => UpnpDeviceUnsafeAccessors.Icons(instance) == null);
            icons.SetSetter(
                (UpnpDevice entity, IEnumerable<Icon> value) => UpnpDeviceUnsafeAccessors.Icons(entity) = value);
            icons.SetMaterializationSetter(
                (UpnpDevice entity, IEnumerable<Icon> value) => UpnpDeviceUnsafeAccessors.Icons(entity) = value);
            icons.SetAccessors(
                IEnumerable<Icon> (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Icons(((UpnpDevice)(entry.Entity))),
                IEnumerable<Icon> (InternalEntityEntry entry) => UpnpDeviceUnsafeAccessors.Icons(((UpnpDevice)(entry.Entity))),
                null,
                IEnumerable<Icon> (InternalEntityEntry entry) => entry.GetCurrentValue<IEnumerable<Icon>>(icons),
                null);
            icons.SetPropertyIndexes(
                index: 0,
                originalValueIndex: -1,
                shadowIndex: -1,
                relationshipIndex: 1,
                storeGenerationIndex: -1);
            icons.SetCollectionAccessor<UpnpDevice, IEnumerable<Icon>, Icon>(
                IEnumerable<Icon> (UpnpDevice entity) => UpnpDeviceUnsafeAccessors.Icons(entity),
                (UpnpDevice entity, IEnumerable<Icon> collection) => UpnpDeviceUnsafeAccessors.Icons(entity) = ((IEnumerable<Icon>)(collection)),
                (UpnpDevice entity, IEnumerable<Icon> collection) => UpnpDeviceUnsafeAccessors.Icons(entity) = ((IEnumerable<Icon>)(collection)),
                IEnumerable<Icon> (UpnpDevice entity, Action<UpnpDevice, IEnumerable<Icon>> setter) => ClrCollectionAccessorFactory.CreateAndSetHashSet<UpnpDevice, IEnumerable<Icon>, Icon>(entity, setter),
                IEnumerable<Icon> () => ((IEnumerable<Icon>)(((ICollection<Icon>)(new HashSet<Icon>(ReferenceEqualityComparer.Instance))))));
            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            var id = runtimeEntityType.FindProperty("Id");
            var height = runtimeEntityType.FindProperty("Height");
            var mime = runtimeEntityType.FindProperty("Mime");
            var udn = runtimeEntityType.FindProperty("Udn");
            var url = runtimeEntityType.FindProperty("Url");
            var width = runtimeEntityType.FindProperty("Width");
            var key = runtimeEntityType.FindKey(new[] { id });
            key.SetPrincipalKeyValueFactory(KeyValueFactoryFactory.CreateSimpleNonNullableFactory<int>(key));
            key.SetIdentityMapFactory(IdentityMapFactoryFactory.CreateFactory<int>(key));
            runtimeEntityType.SetOriginalValuesFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Icon)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, int, string, string, Uri, int>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), ((ValueComparer<int>)(((IProperty)height).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(height)), (source.GetCurrentValue<string>(mime) == null ? null : ((ValueComparer<string>)(((IProperty)mime).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(mime))), (source.GetCurrentValue<string>(udn) == null ? null : ((ValueComparer<string>)(((IProperty)udn).GetValueComparer())).Snapshot(source.GetCurrentValue<string>(udn))), (source.GetCurrentValue<Uri>(url) == null ? null : ((ValueComparer<Uri>)(((IProperty)url).GetValueComparer())).Snapshot(source.GetCurrentValue<Uri>(url))), ((ValueComparer<int>)(((IProperty)width).GetValueComparer())).Snapshot(source.GetCurrentValue<int>(width)))));
                });
            runtimeEntityType.SetStoreGeneratedValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, string>(((ValueComparer<int>)(((IProperty)id).GetValueComparer())).Snapshot(default(int)), (default(string) == null ? null : ((ValueComparer<string>)(((IProperty)udn).GetValueComparer())).Snapshot(default(string)))))));
            runtimeEntityType.SetTemporaryValuesFactory(
                ISnapshot (InternalEntityEntry source) => ((ISnapshot)(new Snapshot<int, string>(default(int), default(string)))));
            runtimeEntityType.SetShadowValuesFactory(
                ISnapshot (IDictionary<string, object> source) => ((ISnapshot)(new Snapshot<int, string>((source.ContainsKey("Id") ? ((int)(source["Id"])) : 0), (source.ContainsKey("Udn") ? ((string)(source["Udn"])) : null)))));
            runtimeEntityType.SetEmptyShadowValuesFactory(
                ISnapshot () => ((ISnapshot)(new Snapshot<int, string>(default(int), default(string)))));
            runtimeEntityType.SetRelationshipSnapshotFactory(
                ISnapshot (InternalEntityEntry source) =>
                {
                    var entity = ((Icon)(source.Entity));
                    return ((ISnapshot)(new Snapshot<int, string>(((ValueComparer<int>)(((IProperty)id).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<int>(id)), (source.GetCurrentValue<string>(udn) == null ? null : ((ValueComparer<string>)(((IProperty)udn).GetKeyValueComparer())).Snapshot(source.GetCurrentValue<string>(udn))))));
                });
            runtimeEntityType.Counts = new PropertyCounts(
                propertyCount: 6,
                navigationCount: 0,
                complexPropertyCount: 0,
                originalValueCount: 6,
                shadowCount: 2,
                relationshipCount: 2,
                storeGeneratedCount: 2);
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Icon");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
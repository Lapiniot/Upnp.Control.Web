// <auto-generated />
using System.Reflection;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Sqlite.Storage.Internal;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Json;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Upnp.Control.DataAccess.CompiledModels
{
    internal partial class ServiceEntityType
    {
        public static RuntimeEntityType Create(RuntimeModel model, RuntimeEntityType baseEntityType = null)
        {
            var runtimeEntityType = model.AddEntityType(
                "Upnp.Control.Models.Service",
                typeof(Service),
                baseEntityType);

            var id = runtimeEntityType.AddProperty(
                "Id",
                typeof(int),
                valueGenerated: ValueGenerated.OnAdd,
                afterSaveBehavior: PropertySaveBehavior.Throw,
                sentinel: 0);
            id.TypeMapping = IntTypeMapping.Default.Clone(
                comparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                keyComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                providerValueComparer: new ValueComparer<int>(
                    (int v1, int v2) => v1 == v2,
                    (int v) => v,
                    (int v) => v),
                mappingInfo: new RelationalTypeMappingInfo(
                    storeTypeName: "INTEGER"));

            var controlUrl = runtimeEntityType.AddProperty(
                "ControlUrl",
                typeof(Uri),
                propertyInfo: typeof(Service).GetProperty("ControlUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Service).GetField("<ControlUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            controlUrl.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => v.ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => v.ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var eventsUrl = runtimeEntityType.AddProperty(
                "EventsUrl",
                typeof(Uri),
                propertyInfo: typeof(Service).GetProperty("EventsUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Service).GetField("<EventsUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            eventsUrl.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => v.ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => v.ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var metadataUrl = runtimeEntityType.AddProperty(
                "MetadataUrl",
                typeof(Uri),
                propertyInfo: typeof(Service).GetProperty("MetadataUrl", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Service).GetField("<MetadataUrl>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            metadataUrl.TypeMapping = SqliteStringTypeMapping.Default.Clone(
                comparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                keyComparer: new ValueComparer<Uri>(
                    (Uri v1, Uri v2) => v1 == v2,
                    (Uri v) => v.GetHashCode(),
                    (Uri v) => v),
                providerValueComparer: new ValueComparer<string>(
                    (string v1, string v2) => v1 == v2,
                    (string v) => v.GetHashCode(),
                    (string v) => v),
                converter: new ValueConverter<Uri, string>(
                    (Uri v) => v.ToString(),
                    (string v) => new Uri(v, UriKind.RelativeOrAbsolute)),
                jsonValueReaderWriter: new JsonConvertedValueReaderWriter<Uri, string>(
                    JsonStringReaderWriter.Instance,
                    new ValueConverter<Uri, string>(
                        (Uri v) => v.ToString(),
                        (string v) => new Uri(v, UriKind.RelativeOrAbsolute))));

            var serviceType = runtimeEntityType.AddProperty(
                "ServiceType",
                typeof(string),
                propertyInfo: typeof(Service).GetProperty("ServiceType", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Service).GetField("<ServiceType>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            serviceType.TypeMapping = SqliteStringTypeMapping.Default;

            var udn = runtimeEntityType.AddProperty(
                "Udn",
                typeof(string));
            udn.TypeMapping = SqliteStringTypeMapping.Default;

            var uniqueServiceName = runtimeEntityType.AddProperty(
                "UniqueServiceName",
                typeof(string),
                propertyInfo: typeof(Service).GetProperty("UniqueServiceName", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(Service).GetField("<UniqueServiceName>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                nullable: true);
            uniqueServiceName.TypeMapping = SqliteStringTypeMapping.Default;

            var key = runtimeEntityType.AddKey(
                new[] { id });
            runtimeEntityType.SetPrimaryKey(key);

            var index = runtimeEntityType.AddIndex(
                new[] { udn });

            return runtimeEntityType;
        }

        public static RuntimeForeignKey CreateForeignKey1(RuntimeEntityType declaringEntityType, RuntimeEntityType principalEntityType)
        {
            var runtimeForeignKey = declaringEntityType.AddForeignKey(new[] { declaringEntityType.FindProperty("Udn") },
                principalEntityType.FindKey(new[] { principalEntityType.FindProperty("Udn") }),
                principalEntityType,
                deleteBehavior: DeleteBehavior.Cascade,
                required: true,
                ownership: true);

            var services = principalEntityType.AddNavigation("Services",
                runtimeForeignKey,
                onDependent: false,
                typeof(IEnumerable<Service>),
                propertyInfo: typeof(UpnpDevice).GetProperty("Services", BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                fieldInfo: typeof(UpnpDevice).GetField("<Services>k__BackingField", BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.DeclaredOnly),
                eagerLoaded: true);

            return runtimeForeignKey;
        }

        public static void CreateAnnotations(RuntimeEntityType runtimeEntityType)
        {
            runtimeEntityType.AddAnnotation("Relational:FunctionName", null);
            runtimeEntityType.AddAnnotation("Relational:Schema", null);
            runtimeEntityType.AddAnnotation("Relational:SqlQuery", null);
            runtimeEntityType.AddAnnotation("Relational:TableName", "Service");
            runtimeEntityType.AddAnnotation("Relational:ViewName", null);
            runtimeEntityType.AddAnnotation("Relational:ViewSchema", null);

            Customize(runtimeEntityType);
        }

        static partial void Customize(RuntimeEntityType runtimeEntityType);
    }
}
// <auto-generated />
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

#pragma warning disable 219, 612, 618
#nullable disable

namespace Upnp.Control.DataAccess.CompiledModels
{
    public partial class PushSubscriptionDbContextModel
    {
        partial void Initialize()
        {
            var pushNotificationSubscription = PushNotificationSubscriptionEntityType.Create(this);

            PushNotificationSubscriptionEntityType.CreateAnnotations(pushNotificationSubscription);

            AddAnnotation("ProductVersion", "8.0.0");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var pushNotificationSubscription = FindEntityType("Upnp.Control.Models.PushNotifications.PushNotificationSubscription")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            pushNotificationSubscription.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase = new TableBase("Upnp.Control.Models.PushNotifications.PushNotificationSubscription", null, relationalModel);
            var authKeyColumnBase = new ColumnBase<ColumnMappingBase>("AuthKey", "BLOB", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.Columns.Add("AuthKey", authKeyColumnBase);
            var createdColumnBase = new ColumnBase<ColumnMappingBase>("Created", "TEXT", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.Columns.Add("Created", createdColumnBase);
            var endpointColumnBase = new ColumnBase<ColumnMappingBase>("Endpoint", "TEXT", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.Columns.Add("Endpoint", endpointColumnBase);
            var p256dhKeyColumnBase = new ColumnBase<ColumnMappingBase>("P256dhKey", "BLOB", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.Columns.Add("P256dhKey", p256dhKeyColumnBase);
            var typeColumnBase = new ColumnBase<ColumnMappingBase>("Type", "INTEGER", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.Columns.Add("Type", typeColumnBase);
            relationalModel.DefaultTables.Add("Upnp.Control.Models.PushNotifications.PushNotificationSubscription", upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase);
            var upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase = new TableMappingBase<ColumnMappingBase>(pushNotificationSubscription, upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase, true);
            upnpControlModelsPushNotificationsPushNotificationSubscriptionTableBase.AddTypeMapping(upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase, false);
            defaultTableMappings.Add(upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)endpointColumnBase, pushNotificationSubscription.FindProperty("Endpoint")!, upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)authKeyColumnBase, pushNotificationSubscription.FindProperty("AuthKey")!, upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)createdColumnBase, pushNotificationSubscription.FindProperty("Created")!, upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)p256dhKeyColumnBase, pushNotificationSubscription.FindProperty("P256dhKey")!, upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)typeColumnBase, pushNotificationSubscription.FindProperty("Type")!, upnpControlModelsPushNotificationsPushNotificationSubscriptionMappingBase);

            var tableMappings = new List<TableMapping>();
            pushNotificationSubscription.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var subscriptionsTable = new Table("Subscriptions", null, relationalModel);
            var endpointColumn = new Column("Endpoint", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("Endpoint", endpointColumn);
            var authKeyColumn = new Column("AuthKey", "BLOB", subscriptionsTable);
            subscriptionsTable.Columns.Add("AuthKey", authKeyColumn);
            var createdColumn = new Column("Created", "TEXT", subscriptionsTable);
            subscriptionsTable.Columns.Add("Created", createdColumn);
            var p256dhKeyColumn = new Column("P256dhKey", "BLOB", subscriptionsTable);
            subscriptionsTable.Columns.Add("P256dhKey", p256dhKeyColumn);
            var typeColumn = new Column("Type", "INTEGER", subscriptionsTable);
            subscriptionsTable.Columns.Add("Type", typeColumn);
            var pK_Subscriptions = new UniqueConstraint("PK_Subscriptions", subscriptionsTable, new[] { endpointColumn });
            subscriptionsTable.PrimaryKey = pK_Subscriptions;
            var pK_SubscriptionsUc = RelationalModel.GetKey(this,
                "Upnp.Control.Models.PushNotifications.PushNotificationSubscription",
                new[] { "Endpoint" });
            pK_Subscriptions.MappedKeys.Add(pK_SubscriptionsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_SubscriptionsUc).Add(pK_Subscriptions);
            subscriptionsTable.UniqueConstraints.Add("PK_Subscriptions", pK_Subscriptions);
            relationalModel.Tables.Add(("Subscriptions", null), subscriptionsTable);
            var subscriptionsTableMapping = new TableMapping(pushNotificationSubscription, subscriptionsTable, true);
            subscriptionsTable.AddTypeMapping(subscriptionsTableMapping, false);
            tableMappings.Add(subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(endpointColumn, pushNotificationSubscription.FindProperty("Endpoint")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(authKeyColumn, pushNotificationSubscription.FindProperty("AuthKey")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(createdColumn, pushNotificationSubscription.FindProperty("Created")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(p256dhKeyColumn, pushNotificationSubscription.FindProperty("P256dhKey")!, subscriptionsTableMapping);
            RelationalModel.CreateColumnMapping(typeColumn, pushNotificationSubscription.FindProperty("Type")!, subscriptionsTableMapping);
            return relationalModel.MakeReadOnly();
        }
    }
}
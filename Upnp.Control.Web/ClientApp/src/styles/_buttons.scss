@include no-theme-colors {
    $btn-padding-x: #{map-get($spacers, 4)};
    @import "bootstrap/scss/buttons";
}

.btn {
    --#{$prefix}btn-bg-img: none;
    --#{$prefix}btn-hover-color: var(--#{$prefix}primary);
    --#{$prefix}btn-active-color: var(--#{$prefix}primary);
    --#{$prefix}btn-active-border-color: transparent;
    --#{$prefix}btn-disabled-color: rgba(var(--#{$prefix}on-surface-rgb), #{$disabled-state-opacity});
    --#{$prefix}btn-disabled-border-color: transparent;
    --#{$prefix}btn-icon-font-size: 18px;
    --#{$prefix}btn-icon-margin-x: -8px 0;
    display: inline-flex;
    min-height: 40px;
    align-items: center;
    justify-content: center;
    // Produce gap between elements inside (this will work even if button contains icon followed by text node 
    // which is currently cannot be addressed via CSS selector + margin technique)
    gap: 8px;
    // Prohibit shrinking in flex layout
    flex-shrink: 0;
    box-shadow: var(--#{$prefix}btn-box-shadow);
    @include gradient-bg-img(var(--#{$prefix}btn-bg-img));

    &:hover {
        @include gradient-bg-img(var(--#{$prefix}hover-layer-cc));
        box-shadow: var(--#{$prefix}btn-hover-box-shadow, var(--#{$prefix}btn-box-shadow));
    }

    &:focus-visible {
        @include gradient-bg-img(var(--#{$prefix}focus-layer-cc));
        outline: var(--#{$prefix}focus-ring);
        outline-offset: #{$focus-ring-offset};
        box-shadow: var(--#{$prefix}btn-focus-box-shadow, var(--#{$prefix}btn-box-shadow));
    }

    &:is(:active, .active, [data-anchor-active]) {
        @include gradient-bg-img(var(--#{$prefix}focus-layer-cc));
    }

    &:active {
        box-shadow: var(--#{$prefix}btn-active-box-shadow, var(--#{$prefix}btn-box-shadow));
    }

    &:disabled {
        box-shadow: var(--#{$prefix}btn-disabled-box-shadow, var(--#{$prefix}btn-box-shadow));
    }

    // 0 specificity selector here is used to allow easy overrides of icon properties by more specific styles
    :where(&) > :where(svg:first-child, img:first-child) {
        font-size: var(--#{$prefix}btn-icon-font-size);
        margin-inline: var(--#{$prefix}btn-icon-margin-x);
    }
}

%icon-reset {
    --#{$prefix}btn-icon-margin-x: ;
}

:is(.btn-group, .btn-group-sm, .btn-group-lg) .btn {
    @extend %icon-reset;
}

.btn-icon,
.toolbar .btn {
    --#{$prefix}btn-padding-x: #{map-get($spacers, 2)};
    --#{$prefix}btn-padding-y: #{map-get($spacers, 2)};
    --#{$prefix}btn-border-radius: 100%;
    --#{$prefix}btn-line-height: 0;
    --#{$prefix}btn-color: var(--#{$prefix}on-surface-variant);
    --#{$prefix}btn-hover-color: var(--#{$prefix}on-surface-variant);
    --#{$prefix}btn-active-color: var(--#{$prefix}on-surface-variant);
    @extend %icon-reset;
    --#{$prefix}btn-icon-font-size: 24px;
    aspect-ratio: 1;
}

.btn-elevate {
    --#{$prefix}btn-color: var(--#{$prefix}primary);
    --#{$prefix}btn-bg: var(--#{$prefix}surface-cntr-low);
    --#{$prefix}btn-hover-color: var(--#{$prefix}primary);
    --#{$prefix}btn-hover-bg: var(--#{$prefix}surface-cntr-low);
    --#{$prefix}btn-active-color: var(--#{$prefix}primary);
    --#{$prefix}btn-active-bg: var(--#{$prefix}surface-cntr-low);
    --#{$prefix}btn-disabled-bg: rgba(var(--#{$prefix}on-surface-rgb), .12);
    --#{$prefix}btn-box-shadow: var(--#{$prefix}shadow-l1);
    --#{$prefix}btn-hover-box-shadow: var(--#{$prefix}shadow-l2);
    --#{$prefix}btn-disabled-box-shadow: none;
}

.btn-fill {
    --#{$prefix}btn-color: var(--#{$prefix}on-primary);
    --#{$prefix}btn-bg: var(--#{$prefix}primary);
    --#{$prefix}btn-hover-color: var(--#{$prefix}on-primary);
    --#{$prefix}btn-hover-bg: var(--#{$prefix}primary);
    --#{$prefix}btn-active-color: var(--#{$prefix}on-primary);
    --#{$prefix}btn-active-bg: var(--#{$prefix}primary);
    --#{$prefix}btn-disabled-color: rgba(var(--#{$prefix}on-primary-rgb), #{$disabled-state-opacity});
    --#{$prefix}btn-disabled-bg: rgba(var(--#{$prefix}on-surface-rgb), .12);
}

.btn-tone {
    --#{$prefix}btn-color: var(--#{$prefix}on-secondary-cntr);
    --#{$prefix}btn-bg: var(--#{$prefix}secondary-cntr);
    --#{$prefix}btn-hover-color: var(--#{$prefix}on-secondary-cntr);
    --#{$prefix}btn-hover-bg: var(--#{$prefix}secondary-cntr);
    --#{$prefix}btn-active-color: var(--#{$prefix}on-secondary-cntr);
    --#{$prefix}btn-active-bg: var(--#{$prefix}secondary-cntr);
    --#{$prefix}btn-disabled-bg: rgba(var(--#{$prefix}on-surface-rgb), .12);
}

.btn-outline {
    --#{$prefix}btn-border-color: var(--#{$prefix}outline);
    --#{$prefix}btn-hover-border-color: var(--#{$prefix}outline);
    --#{$prefix}btn-active-border-color: var(--#{$prefix}outline);
    --#{$prefix}btn-disabled-border-color: rgba(var(--#{$prefix}on-surface-rgb), .12);
}

.toolbar {
    display: flex;
    gap: map-get($spacers, 2);
}

// Represent flat container button with a following behavior:
// 1. Child elements are stacked on top of each other
// 2. No decoration on the button itself
// 3. Button size is determined by the largest children size
// 4. Button is "shape clip ready" via setting proper overflow value and 
//    constraining sizes to the intrinsic content size to 
//    prevent shrinking in flex layouts
.btn-stack {
    --#{$prefix}btn-padding-x: 0;
    --#{$prefix}btn-padding-y: 0;
    --#{$prefix}btn-border-radius: 0;
    --#{$prefix}btn-border-width: 0;
    --#{$prefix}btn-color: inherit;
    overflow: clip;
    @extend %icon-reset;
    @extend %grid-stack;

    & > * {
        position: relative;
        z-index: 1;
    }
}

%btn-fab {
    --#{$prefix}btn-padding-x: 16px;
    --#{$prefix}btn-padding-y: 16px;
    --#{$prefix}btn-margin-x: 16px;
    --#{$prefix}btn-margin-y: 16px;
    --#{$prefix}btn-border-radius: #{$corner-lg};
    --#{$prefix}btn-border-width: 0;
    --#{$prefix}btn-line-height: 0;
    --#{$prefix}btn-box-shadow: var(--#{$prefix}shadow-l3);
    --#{$prefix}btn-hover-box-shadow: var(--#{$prefix}shadow-l4);
    @extend %icon-reset;
    --#{$prefix}btn-icon-font-size: 24px;

    z-index: $zindex-dropdown;
    margin: var(--#{$prefix}btn-margin-x) var(--#{$prefix}btn-margin-y);
}

@mixin btn-fab($container: "surface-cntr-high", $icon: "primary") {
    --#{$prefix}btn-color: var(--#{$prefix}#{$icon});
    --#{$prefix}btn-hover-color: var(--#{$prefix}#{$icon});
    --#{$prefix}btn-active-color: var(--#{$prefix}#{$icon});
    --#{$prefix}btn-bg: var(--#{$prefix}#{$container});
    --#{$prefix}btn-hover-bg: var(--#{$prefix}#{$container});
    --#{$prefix}btn-active-bg: var(--#{$prefix}#{$container});

    @extend %btn-fab;
}

$configurations: (
    null:primary-cntr on-primary-cntr,
    "secondary":secondary-cntr on-secondary-cntr,
    "tertiary":tertiary-cntr on-tertiary-cntr,
    "surface":surface-cntr-high primary,
    "branded":surface-cntr-high on-secondary
);

@each $name, $colors in $configurations {
    .btn-fab#{infix($name)} {
        @include btn-fab($colors...);
    }
}

.btn-fab-lg {
    --#{$prefix}btn-padding-x: 30px;
    --#{$prefix}btn-padding-y: 30px;
    --#{$prefix}btn-border-radius: #{$corner-xl};
    --#{$prefix}btn-icon-font-size: 36px;
}

.btn-fab-sm {
    --#{$prefix}btn-padding-x: 8px;
    --#{$prefix}btn-padding-y: 8px;
    --#{$prefix}btn-border-radius: #{$corner-md};
    --#{$prefix}btn-icon-font-size: 24px;
}

// FAB with low elevation
.btn-fab-low {
    --#{$prefix}btn-box-shadow: var(--#{$prefix}shadow-l1);
    --#{$prefix}btn-hover-box-shadow: var(--#{$prefix}shadow-l2);

    &:where(.btn-fab-surface, .btn-fab-branded) {
        --#{$prefix}btn-bg: var(--#{$prefix}surface-cntr-low);
        --#{$prefix}btn-hover-bg: var(--#{$prefix}surface-cntr-low);
        --#{$prefix}btn-active-bg: var(--#{$prefix}surface-cntr-low);
    }
}

.btn-fab-ext {
    --#{$prefix}btn-padding-x: 16px;
    --#{$prefix}btn-padding-y: 16px;
    --#{$prefix}btn-border-radius: #{$corner-lg};
    --#{$prefix}btn-font-size: larger;
    --#{$prefix}btn-font-weight: 500;
    --#{$prefix}btn-icon-font-size: 24px;
    min-width: 80px;
}
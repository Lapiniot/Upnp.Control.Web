/********** Grid Layout utilities **********/

$utilities: map-merge($utilities, ("col-span": (class: "col", property: "grid-column", values: (2: span 2))));
$grid-responsive-auto-breakpoints: null sm;

@mixin grid-auto-columns($min: 10rem, $max: 30rem, $mode: auto-fit) {
    grid: auto / repeat($mode, minmax(unquote("min(#{$min}, 100%)"), $max));
}

@mixin grid-scroll-snap($type: y proximity, $align: start, $padding: null) {
    scroll-snap-type: $type;

    @if($padding) {
        scroll-padding: $padding;
    }

    > * {
        scroll-snap-align: $align;
    }
}

@mixin grid-responsive-auto($size: 34rem) {
    @include grid-auto-columns($max: $size);
    justify-content: space-evenly;
    align-content: start;
    align-items: start;
    padding: map-get($spacers, 3);
    overflow-y: auto;
    height: 100%;
    @include grid-scroll-snap($padding: map-get($spacers, 3) auto);

    > * {
        --switch-border: initial;
        --switch-border-radius: initial;
        --switch-shadow: initial;
        touch-action: pan-y;
    }
}

.grid-carousel {
    grid: minmax(0, 1fr) / auto-flow 100%;
    height: 100%;
    overflow-x: auto;
    overflow-y: hidden;
    overscroll-behavior-x: contain;
    @include grid-scroll-snap($type: x mandatory);

    > * {
        --switch-border: 0;
        --switch-border-radius: 0;
        --switch-shadow: none;

        &:only-child {
            touch-action: pan-y;
        }
    }
}

@each $breakpoint in [null sm] {
    @include responsive-class(grid-responsive-auto, $breakpoint, [min-width min-height]) {
        @include grid-responsive-auto;
    }
}

.grid-auto-m15 {
    @include grid-auto-columns($min: 15rem, $max: 1fr, $mode: auto-fill);
}

%grid-stack {
    display: grid;

    > * {
        grid-area: 1 / 1;
    }
}

.grid-stack {
    @extend %grid-stack;
}

// Grid forms

.grid-form-label {
    color: $text-muted;
    user-select: none;

    &::after {
        content: ":";
    }
}

.grid-form-text {
    overflow: hidden;
    text-overflow: ellipsis;
    user-select: auto;
}

.grid-form {
    --#{$prefix}-grid-form-template: initial;
    --#{$prefix}-grid-form-gap: 0;
    --#{$prefix}-grid-form-group-gap: 0;
    --#{$prefix}-grid-form-label-justify: normal;
    display: grid;
    grid: var(--#{$prefix}-grid-form-template);
    gap: var(--#{$prefix}-grid-form-gap);

    > :nth-child(odd) {
        @extend .grid-form-label;
        justify-self: var(--#{$prefix}-grid-form-label-justify);

        &:not(:first-child) {
            margin-top: var(--#{$prefix}-grid-form-group-gap);
        }
    }

    > :nth-child(even) {
        @extend .grid-form-text;
    }
}

@each $breakpoint in [] {
    @include responsive-class("grid-form-sparse", $breakpoint) {
        --#{$prefix}-grid-form-group-gap: #{map-get($spacers, 2)};
    }
}

@each $breakpoint in [null sm] {
    @include responsive-class("grid-form-dense", $breakpoint) {
        --#{$prefix}-grid-form-template: auto / auto 1fr;
        --#{$prefix}-grid-form-group-gap: 0;
        --#{$prefix}-grid-form-gap:#{map-get($spacers, 1)} #{map-get($spacers, 2)};
        --#{$prefix}-grid-form-label-justify: end;
    }
}

@each $breakpoint in [null] {
    @include responsive-class("grid-auto-1fr", $breakpoint) {
        grid: auto / auto 1fr;
    }
}

@each $breakpoint in [null] {
    @include responsive-class("grid-1fr-auto", $breakpoint) {
        grid: auto / 1fr auto;
    }
}
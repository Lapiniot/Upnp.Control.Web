@import "functions";

@mixin no-theme-colors() {
    // Reset global $theme-colors map to avoid generation of theme color related styles
    $temp: $theme-colors;
    $theme-colors: () !global;
    @content();
    // then restore value to the original one
    $theme-colors: $temp !global;
}

@mixin with-breakpoints($breakpoints) {
    // Reset global $grid-breakpoints map to avoid generation of grid breakpoint related styles
    $temp: $grid-breakpoints;
    $grid-breakpoints: $breakpoints !global;
    @content();
    // then restore value to the original one
    $grid-breakpoints: $temp !global;
}

@mixin responsive-class($class, $breakpoint, $conditions: min-width) {
    @if($breakpoint) {
        $value: map-get($grid-breakpoints, $breakpoint);

        .#{$class}-#{$breakpoint} {
            @media #{build-media-query(zip($conditions, clone($value, length($conditions))))} {
                @content();
            }
        }
    }

    @else {
        .#{$class} {
            @content();
        }
    }
}

@mixin unify-parent($child) {
    @at-root #{selector-unify(&, $child)} {
        @content;
    }
}

@mixin overlay {
    position: absolute;
    z-index: $zindex-modal;
    inset: 0;
}

@mixin animation($animations...) {
    animation: $animations;

    @media (prefers-reduced-motion: reduce) {
        animation: none;
    }
}

@mixin toggle-on-state($property, $from, $to, $states...) {
    #{$property}: #{$from};

    @at-root :is(#{$states}) > & {
        opacity: $to;
    }
}

@mixin any-pointer($type: coarse) {
    @media (any-pointer: $type) {
        @content();
    }
}

@mixin pointer($type: coarse) {
    @media (pointer: $type) {
        @content();
    }
}

@mixin gradient-bg-img($image) {
    background-image: if($enable-gradients, (var(--#{$prefix}gradient), $image), $image);
}

@mixin divider-border-bottom($width: 1px, $color: $surface-variant-color, $padding: map-get($spacers, 3)) {
    border-bottom: $width solid transparent;
    border-image: divider-border-image($color, $padding...) 0 0 1 0;
}
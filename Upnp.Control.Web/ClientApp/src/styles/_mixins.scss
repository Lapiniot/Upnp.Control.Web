@function infix($name) {
    @return if(($name == null) or ($name == ""), "", "-#{$name}");
}

@function build-media-query($conditions, $operator: and) {
    $condition: "";
    $i: 1;

    @each $feature, $value in $conditions {
        $condition: $condition + #{if($i != 1, " #{$operator} ", "")}(#{$feature}#{if($value, ": #{$value}", "")});
        $i: $i + 1;
    }

    @return $condition;
}

@function clone($value, $count: 1) {
    $list: [];

    @for $i from 1 through $count {
        $list: append($list, $value);
    }

    @return $list;
}

@mixin no-theme-colors() {
    // Reset global $theme-colors map to avoid generation of theme color related styles
    $temp: $theme-colors !global;
    $theme-colors: () !global;
    @content();
    // then restore value to the original one
    $theme-colors: $temp !global;
}

@mixin responsive-class($class, $breakpoint, $conditions: min-width) {
    @if($breakpoint) {
        $value: map-get($grid-breakpoints, $breakpoint);

        .#{$class}-#{$breakpoint} {
            @media #{build-media-query(zip($conditions, clone($value, length($conditions))))} {
                @content();
            }
        }
    }

    @else {
        .#{$class} {
            @content();
        }
    }
}

@mixin unify-parent($child) {
    @at-root #{selector-unify(&, $child)} {
        @content;
    }
}

@mixin font-scale($scale) {
    font-size: $scale * 1rem !important;
}

@mixin overlay {
    position: absolute;
    z-index: $zindex-modal;
    inset: 0;
}

@mixin animation($animations...) {
    animation: $animations;

    @media (prefers-reduced-motion: reduce) {
        animation: none;
    }
}

@mixin any-pointer($type: coarse) {
    @media (any-pointer: $type) {
        @content();
    }
}

@mixin pointer($type: coarse) {
    @media (pointer: $type) {
        @content();
    }
}

@mixin gradient-bg-img($image) {
    background-image: if($enable-gradients, (var(--#{$prefix}gradient), $image), $image);
}